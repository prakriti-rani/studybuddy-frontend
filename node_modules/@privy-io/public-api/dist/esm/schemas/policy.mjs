import{z as e}from"zod";import{InvalidInputError as t,PrivyErrorCode as r}from"@privy-io/api-base";import{TypedDataTypesInputParams as i}from"./wallet-api.mjs";import"./api.mjs";import"./core.mjs";import"bs58";import"libphonenumber-js/max";import"viem";const a=e.enum(["ALLOW","DENY"]);let l=e.union([e.string(),e.number(),e.boolean(),e.null()]),o=e.lazy((()=>e.union([l,e.array(o),e.record(o)])));const n=e.union([e.literal("eq"),e.literal("gt"),e.literal("gte"),e.literal("lt"),e.literal("lte"),e.literal("in")]),s=e.object({operator:n,value:e.union([e.string(),e.array(e.string())])}),c=e.object({field_source:e.literal("ethereum_transaction"),field:e.union([e.literal("to"),e.literal("value")])}).strict().merge(s),m=e.object({field_source:e.literal("ethereum_calldata"),field:e.string(),abi:o}).strict().merge(s),d=e.object({field_source:e.literal("ethereum_typed_data_domain"),field:e.union([e.literal("chain_id"),e.literal("verifying_contract")])}).strict().merge(s),u=e.object({field_source:e.literal("ethereum_typed_data_message"),field:e.string(),typed_data:e.object({types:i,primary_type:e.string()})}).strict().merge(s),_=e.discriminatedUnion("field_source",[c,m,d,u]),p=e.object({name:e.string().max(50,"Rule name must be fewer than 50 characters"),conditions:e.array(_),action:a}).strict();let b=e.union([e.literal("eth_sendTransaction"),e.literal("eth_signTransaction"),e.literal("eth_signTypedData_v4")]),g=e.object({method:b,rules:e.array(p)}).strict();const y=e.object({version:e.literal("1.0"),name:e.string().max(50,"Policy name must be fewer than 50 characters"),chain_type:e.literal("ethereum"),method_rules:e.array(g),default_action:a}).strict(),h=y.extend({id:e.string(),created_at:e.number()}),f=e.object({policy_id:e.string({required_error:"Policy ID must be provided",invalid_type_error:"Policy ID is not a valid string"}).min(1)}).catch((({error:e})=>{throw new t(e.message,r.INVALID_DATA)})),j=e.object({name:e.string().trim().min(1,"Name is required").max(50,"Policy name must be fewer than 50 characters").optional(),method_rules:e.array(g).optional()}).strict().superRefine(((e,t)=>{Object.values(e).every((e=>null==e))&&t.addIssue({code:"custom",message:"At least one field must be provided"})}));export{s as BaseEthereumCondition,_ as Condition,n as ConditionOperator,m as EthereumCalldataCondition,c as EthereumTransactionCondition,d as EthereumTypedDataDomainCondition,u as EthereumTypedDataMessageCondition,a as PolicyAction,f as PolicyIdFromPath,h as PolicyResponse,y as PolicyWithoutValidation,p as Rule,j as UpdatePolicyInput};
