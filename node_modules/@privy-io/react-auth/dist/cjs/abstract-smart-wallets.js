"use strict";var e=require("@abstract-foundation/agw-client"),n=require("viem"),r=require("viem/accounts"),t=require("viem/chains"),a=require("./useWallets-Dmyb5a0t.js"),s=require("./internal-context-DV3MljLU.js"),i=require("./getPublicClient-hVv5ZSWd.js"),o=require("./getEmbeddedConnectedWallet-DTU4T9TJ.js"),c=require("./smart-wallets-BJE1oUqH.js");require("viem/utils"),require("react/jsx-runtime"),require("react"),require("tinycolor2"),require("ofetch"),require("permissionless"),require("permissionless/accounts"),require("permissionless/clients/pimlico"),require("viem/account-abstraction"),require("@privy-io/js-sdk-core"),exports.useAbstractSmartWallets=function(){let{user:l}=a.usePrivyContext(),{hideWalletUIs:d,openPrivyModal:u,chains:E,appId:p,rpcConfig:y}=s.usePrivyInternal(),{wallets:g}=a.useWallets(),{setModalData:m}=a.usePrivyModal(),T=async(a=t.abstractTestnet.id)=>{let s=o.getEmbeddedConnectedWallet(g);if(!s)throw Error("No connected wallet found");let c="string"==typeof a?n.hexToNumber(a):a;if(![t.abstractTestnet.id,2741].includes(c))throw Error("Error, only Abstract chains are supported");let l=E.find((e=>e.id===c));if(!l)throw Error("Chain not configured");await s.switchChain(l.id);let d=await s.getEthereumProvider(),u=n.createWalletClient({account:s.address,transport:n.custom(d)}),m=r.toAccount({address:s.address,signMessage:u.signMessage,signTransaction:u.signTransaction,signTypedData:u.signTypedData});return await e.createAbstractClient({chain:l,transport:n.http(i.getJsonRpcEndpointFromChain(l,y,p)),publicTransport:n.http(i.getJsonRpcEndpointFromChain(l,y,p)),signer:m})};return{signMessage:async({message:e},n)=>{let r=await T(n);return new Promise((async(n,t)=>{let{entropyId:s,entropyIdVerifier:i}=a.getEntropyDetailsFromUser(l);d.current=!0,m({connectWallet:{entropyId:s,entropyIdVerifier:i,onCompleteNavigateTo:a.ModalScreen.EMBEDDED_WALLET_SIGN_REQUEST_SCREEN,onFailure:()=>{}},signMessage:{method:"personal_sign",data:e,confirmAndSign:()=>r.signMessage({message:e}),onSuccess:e=>n(e),onFailure:t,uiOptions:{isCancellable:!0}}}),u(a.ModalScreen.EMBEDDED_WALLET_CONNECTING_SCREEN)})).finally((()=>{d.current=!1}))},signTypedData:async(e,n)=>{let r=await T(n);return new Promise((async(n,t)=>{d.current=!0;let{entropyId:s,entropyIdVerifier:i}=a.getEntropyDetailsFromUser(l);m({connectWallet:{entropyId:s,entropyIdVerifier:i,onCompleteNavigateTo:a.ModalScreen.EMBEDDED_WALLET_SIGN_REQUEST_SCREEN,onFailure:()=>{}},signMessage:{method:"eth_signTypedData_v4",data:e,confirmAndSign:()=>r.signTypedData(e),onSuccess:e=>n(e),onFailure:t,uiOptions:{isCancellable:!0}}}),u(a.ModalScreen.EMBEDDED_WALLET_CONNECTING_SCREEN)})).finally((()=>{d.current=!1}))},sendTransaction:async e=>{let n=await T(e.chainId),r=[],t="calls"in e&&void 0!==e.calls;return r=t?[...e.calls]:[e],new Promise((async(s,i)=>{d.current=!0;let{entropyId:o,entropyIdVerifier:E}=a.getEntropyDetailsFromUser(l);m({connectWallet:{entropyId:o,entropyIdVerifier:E,onCompleteNavigateTo:a.ModalScreen.EMBEDDED_WALLET_SEND_TRANSACTION_SCREEN,onFailure:()=>{}},sendTransaction:{transactionRequests:c.callsToTransactionRequests({calls:r,chain:n.chain,maxPriorityFeePerGas:e.maxPriorityFeePerGas,maxFeePerGas:e.maxFeePerGas,nonce:e.nonce?BigInt(e.nonce):void 0}),entropyId:o,entropyIdVerifier:E,transactingWallet:{address:n.account.address,walletIndex:null},signOnly:!1,getIsSponsored:async()=>void 0!==e.paymaster&&void 0!==e.paymasterInput,onConfirm:()=>t?n.sendTransactionBatch(e):n.sendTransaction(e),onSuccess:e=>s(e.hash),onFailure:i,uiOptions:{isCancellable:!0}}}),u(a.ModalScreen.EMBEDDED_WALLET_CONNECTING_SCREEN)})).finally((()=>{d.current=!1}))},signTransaction:async e=>{let n=await T(e.chainId),r=[],t="calls"in e&&void 0!==e.calls;return r=t?[...e.calls]:[e],new Promise((async(s,i)=>{d.current=!0;let{entropyId:o,entropyIdVerifier:E}=a.getEntropyDetailsFromUser(l);m({connectWallet:{entropyId:o,entropyIdVerifier:E,onCompleteNavigateTo:a.ModalScreen.EMBEDDED_WALLET_SEND_TRANSACTION_SCREEN,onFailure:()=>{}},sendTransaction:{transactionRequests:c.callsToTransactionRequests({calls:r,chain:n.chain,maxPriorityFeePerGas:e.maxPriorityFeePerGas,maxFeePerGas:e.maxFeePerGas,nonce:e.nonce?BigInt(e.nonce):void 0}),entropyId:o,entropyIdVerifier:E,transactingWallet:{address:n.account.address,walletIndex:null},signOnly:!0,getIsSponsored:async()=>void 0!==e.paymaster&&void 0!==e.paymasterInput,onConfirm:()=>{if(!t)return n.signTransaction(e);throw Error("Batch transactions not supported for signing")},onSuccess:e=>s(e.hash),onFailure:i,uiOptions:{isCancellable:!0}}}),u(a.ModalScreen.EMBEDDED_WALLET_CONNECTING_SCREEN)})).finally((()=>{d.current=!1}))}}};
