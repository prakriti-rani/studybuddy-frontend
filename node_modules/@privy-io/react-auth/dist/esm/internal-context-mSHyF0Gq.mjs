import{FetchError as e}from"ofetch";import{createContext as t,useContext as a}from"react";var s;class i extends Error{toString(){return`${this.type}${this.privyErrorCode?`-${this.privyErrorCode}`:""}: ${this.message}${this.cause?` [cause: ${this.cause}]`:""}`}constructor(e,t,a){super(e),t instanceof Error&&(this.cause=t),this.privyErrorCode=a}}class n extends i{constructor(e,t,a,s,i,n){super(a,s,i),this.type=e,this.status=t,this.data=n}}class _ extends i{constructor(e,t,a){super(e,t,a),this.type="client_error"}}class r extends _{constructor(){super("Request timed out",void 0,"client_request_timeout")}}class o extends i{constructor(e,t,a){super(e,t,a),this.type="connector_error"}}const l=t=>{if(t instanceof i)return t;if(!(t instanceof e))return d(t);if(!t.response)return new n("api_error",null,t.message,t);let{type:a,message:s,error:_,code:r}=t.data;return new n(a||"ApiError",t.response.status,s||_,t,r,t.data)},d=e=>e instanceof i?e:e instanceof Error?new _(e.message,e):new _(`Internal error: ${e}`);var E=((s={}).OAUTH_ACCOUNT_SUSPENDED="oauth_account_suspended",s.MISSING_OR_INVALID_PRIVY_APP_ID="missing_or_invalid_privy_app_id",s.MISSING_OR_INVALID_PRIVY_ACCOUNT_ID="missing_or_invalid_privy_account_id",s.MISSING_OR_INVALID_TOKEN="missing_or_invalid_token",s.INVALID_DATA="invalid_data",s.INVALID_CAPTCHA="invalid_captcha",s.LINKED_TO_ANOTHER_USER="linked_to_another_user",s.CANNOT_LINK_MORE_OF_TYPE="cannot_link_more_of_type",s.FAILED_TO_LINK_ACCOUNT="failed_to_link_account",s.FAILED_TO_UPDATE_ACCOUNT="failed_to_update_account",s.USER_EXITED_UPDATE_FLOW="exited_update_flow",s.ALLOWLIST_REJECTED="allowlist_rejected",s.OAUTH_USER_DENIED="oauth_user_denied",s.OAUTH_UNEXPECTED="oauth_unexpected",s.UNKNOWN_AUTH_ERROR="unknown_auth_error",s.USER_EXITED_AUTH_FLOW="exited_auth_flow",s.USER_EXITED_LINK_FLOW="exited_link_flow",s.USER_EXITED_SET_PASSWORD_FLOW="user_exited_set_password_flow",s.MUST_BE_AUTHENTICATED="must_be_authenticated",s.UNKNOWN_CONNECT_WALLET_ERROR="unknown_connect_wallet_error",s.GENERIC_CONNECT_WALLET_ERROR="generic_connect_wallet_error",s.CLIENT_REQUEST_TIMEOUT="client_request_timeout",s.INVALID_CREDENTIALS="invalid_credentials",s.MISSING_MFA_CREDENTIALS="missing_or_invalid_mfa",s.UNKNOWN_MFA_ERROR="unknown_mfa_error",s.EMBEDDED_WALLET_ALREADY_EXISTS="embedded_wallet_already_exists",s.EMBEDDED_WALLET_NOT_FOUND="embedded_wallet_not_found",s.EMBEDDED_WALLET_CREATE_ERROR="embedded_wallet_create_error",s.UNKNOWN_EMBEDDED_WALLET_ERROR="unknown_embedded_wallet_error",s.EMBEDDED_WALLET_PASSWORD_UNCONFIRMED="embedded_wallet_password_unconfirmed",s.EMBEDDED_WALLET_PASSWORD_ALREADY_EXISTS="embedded_wallet_password_already_exists",s.EMBEDDED_WALLET_RECOVERY_ALREADY_EXISTS="embedded_wallet_recovery_already_exists",s.TRANSACTION_FAILURE="transaction_failure",s.UNSUPPORTED_CHAIN_ID="unsupported_chain_id",s.NOT_SUPPORTED="not_supported",s.CAPTCHA_TIMEOUT="captcha_timeout",s.INVALID_MESSAGE="invalid_message",s.UNABLE_TO_SIGN="unable_to_sign",s.CAPTCHA_FAILURE="captcha_failure",s.CAPTCHA_DISABLED="captcha_disabled",s.SESSION_STORAGE_UNAVAILABLE="session_storage_unavailable",s.TOO_MANY_REQUESTS="too_many_requests",s.USER_LIMIT_REACHED="max_accounts_reached",s.DISALLOWED_LOGIN_METHOD="disallowed_login_method",s.DISALLOWED_PLUS_EMAIL="disallowed_plus_email",s.PASSKEY_NOT_ALLOWED="passkey_not_allowed",s.USER_DOES_NOT_EXIST="user_does_not_exist",s.INSUFFICIENT_BALANCE="insufficient_balance",s.ACCOUNT_TRANSFER_REQUIRED="account_transfer_required",s);class u extends _{constructor(){super("Method called before `ready`. Ensure you wait until `ready` is true before calling.")}}class c extends _{constructor(e="Embedded wallet error",t){super(e,t,"unknown_embedded_wallet_error")}}class A extends _{constructor(e="User must be authenticated"){super(e,void 0,"must_be_authenticated")}}class S extends _{constructor(e){super("This application is in development mode and must be upgraded to production to log in new users.",e,"max_accounts_reached")}}const T=()=>{throw Error("You need to wrap your application with the <PrivyProvider> initialized with your app id.")},h=e=>()=>{throw Error(e.trim())},p=/*#__PURE__*/t({setAuthenticated:T,setUser:T,isNewUserThisSession:!1,walletConnectionStatus:null,connectors:[],solanaWallets:[],rpcConfig:{rpcUrls:{}},showFiatPrices:!0,chains:[],clientAnalyticsId:null,pendingTransaction:null,client:null,appId:"notAdded",customAuthStatus:{status:"not-enabled"},hideWalletUIs:{current:!1},nativeTokenSymbolForChainId:T,initializeWalletProxy:T,getAuthMeta:T,getAuthFlow:T,closePrivyModal:T,openPrivyModal:T,connectWallet:T,initLoginWithWallet:T,loginWithWallet:T,initLoginWithFarcaster:T,loginWithFarcaster:T,loginWithCode:T,initLoginWithEmail:T,initLoginWithSms:T,initUpdateEmail:T,initUpdatePhone:T,resendEmailCode:T,resendSmsCode:T,initLoginWithHeadlessOAuth:T,loginWithHeadlessOAuth:T,crossAppAuthFlow:T,initLoginWithOAuth:T,recoveryOAuthFlow:T,loginWithOAuth:T,passkeyAuthState:{status:"initial"},setPasskeyAuthState:T,initSignupWithPasskey:T,signupWithPasskey:T,initLoginWithPasskey:T,loginWithPasskey:T,initLinkWithPasskey:T,linkWithPasskey:T,refreshSessionAndUser:T,loginWithGuestAccountFlow:T,walletProxy:null,createAnalyticsEvent:T,acceptTerms:T,getUsdTokenPrice:T,getUsdPriceForSol:T,getSplTokenMetadata:T,recoverPrimaryWallet:T,updateWallets:T,fundWallet:T,openModal:T,setReadyToTrue:T,requestFarcasterSignerStatus:T,initLoginWithTelegram:T,loginWithTelegram:T,generateSiweMessage:T,generateSiweMessageForSmartWallet:T,linkWithSiwe:T,linkSmartWallet:T,delegateWallet:T,revokeDelegatedWallets:T,embeddedSolanaWallets:null,createEmbeddedSolanaWallet:T,exportSolanaWallet:T,solanaSignMessage:T,sendSolanaTransaction:T,signSolanaTransaction:T,connectCoinbaseSmartWallet:T,initiateAccountTransfer:T,emailOtpState:{status:"initial"},setEmailOtpState:T,smsOtpState:{status:"initial"},setSmsOtpState:T,siweState:{status:"initial"},setSiweState:T,oAuthState:{status:"initial"},setOAuthState:T,telegramAuthState:{status:"initial"},setTelegramAuthState:T,isHeadlessOAuthLoading:!1,isHeadlessSigning:T}),I=()=>a(p);export{p as I,_ as P,E as a,o as b,r as c,d,n as e,l as f,S as g,c as h,A as i,i as j,u as k,h as l,T as n,I as u};
