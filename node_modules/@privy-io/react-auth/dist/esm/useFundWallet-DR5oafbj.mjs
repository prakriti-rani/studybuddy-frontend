import{useCallback as e}from"react";import{q as a,u as t,M as r}from"./useWallets-DTpjk5Rk.mjs";import{b as s,u as n,x as o,o as l}from"./prepareFundingModalData-due26ueW.mjs";import{Connection as i,PublicKey as c,Transaction as m,SystemProgram as d,TransactionInstruction as u,VersionedTransaction as p,TransactionMessage as f}from"@solana/web3.js";import{getSolanaRpcEndpointForCluster as w}from"@privy-io/js-sdk-core";import{u as g}from"./internal-context-mSHyF0Gq.mjs";var h={id:s,getBalance:({address:e,cluster:a})=>new i(w(a)).getBalance(new c(e)),createTransferTransaction:async({from:e,to:a,amount:t,cluster:r})=>{let s=new c(e),n=new m;n.add(d.transfer({fromPubkey:s,toPubkey:new c(a),lamports:t}));let o=new i(w(r)),l=await o.getLatestBlockhash();return n.recentBlockhash=l.blockhash,n.feePayer=s,{transaction:n,connection:o}},createBridgeTransactionFromRelayQuote:async({quote:e,from:a,cluster:t})=>{let r=e.steps[0]?.items?.[0];if(!r)return;let s=r.data.instructions.map((({keys:e,programId:a,data:t})=>new u({keys:e.map((({pubkey:e,isSigner:a,isWritable:t})=>({pubkey:new c(e),isSigner:a,isWritable:t}))),programId:new c(a),data:Buffer.from(t,"hex")}))),n=r.data.addressLookupTableAddresses?.map((e=>new c(e))),o=new i(w(t)),l=await Promise.all((n??[]).map((async e=>o.getAddressLookupTable(e).then((e=>e.value))))),{blockhash:m}=await o.getLatestBlockhash();return{transaction:new p(new f({payerKey:new c(a),instructions:s,recentBlockhash:m}).compileToV0Message(l)),connection:o}}};const k=s=>{n("fundSolanaWallet",s);let i=a(),{setModalData:c}=t(),{openModal:m}=g();return o(h),{fundWallet:e((async(e,a)=>{let t=r.FUNDING_METHOD_SELECTION_SCREEN;c({funding:l({address:e,appConfig:i,fundWalletConfig:a,methodScreen:t})}),m(t)}),[i,c,m])}};export{h as t,k as u};
