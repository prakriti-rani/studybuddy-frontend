import{PasswordlessInit as e,PasswordlessAuthenticate as t,PasswordlessLink as s,PasswordlessUpdate as r,PasswordlessUnlink as i}from"@privy-io/public-api";import{maybeCreateWalletOnLogin as a}from"./maybeCreateWalletOnLogin.mjs";import"../../utils/getUserEmbeddedEthereumWallet.mjs";import"../../utils/getAllUserEmbeddedEthereumWallets.mjs";import"../../utils/getUserEmbeddedSolanaWallet.mjs";import"../../utils/getAllUserEmbeddedSolanaWallets.mjs";import"../../utils/shouldCreateEmbeddedEthWallet.mjs";import"../../utils/shouldCreateEmbeddedSolWallet.mjs";class d{async sendCode(t,s){return this._privyInternal.fetch(e,{body:{email:t,token:s}})}async loginWithCode(e,s,r,i){let d=await this._privyInternal.fetch(t,{body:{email:e,code:s,mode:r}});await this._privyInternal.session.updateWithTokensResponse(d);let l=await a(this._embedded,d,i?.embedded);return this._privyInternal.callbacks?.setUser?.(l.user),l}async linkWithCode(e,t){return await this._privyInternal.fetch(s,{body:{email:e,code:t}}),(await this._privyInternal.refreshSession()).user}async updateEmail({oldEmailAddress:e,newEmailAddress:t,code:s}){return await this._privyInternal.fetch(r,{body:{oldAddress:e,newAddress:t,code:s}}),(await this._privyInternal.refreshSession()).user}async unlink(e){return await this._privyInternal.fetch(i,{body:{address:e}}),(await this._privyInternal.refreshSession()).user}constructor(e,t){this._privyInternal=e,this._embedded=t}}export{d as default};
