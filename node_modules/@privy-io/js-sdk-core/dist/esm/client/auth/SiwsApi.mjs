import{SiwsUnlink as e,SiwsLink as t,SiwsAuthenticate as s,SiwsInit as r}from"@privy-io/public-api";import{maybeCreateWalletOnLogin as a}from"./maybeCreateWalletOnLogin.mjs";import"../../utils/getUserEmbeddedEthereumWallet.mjs";import"../../utils/getAllUserEmbeddedEthereumWallets.mjs";import"../../utils/getUserEmbeddedSolanaWallet.mjs";import"../../utils/getAllUserEmbeddedSolanaWallets.mjs";import"../../utils/shouldCreateEmbeddedEthWallet.mjs";import"../../utils/shouldCreateEmbeddedSolWallet.mjs";class i{async unlink({address:t}){return await this._privyInternal.fetch(e,{body:{address:t}}),(await this._privyInternal.refreshSession()).user}async link({message:e,signature:s,walletClientType:r,connectorType:a}){return await this._privyInternal.fetch(t,{body:{message:e,signature:s,walletClientType:r,connectorType:a}}),(await this._privyInternal.refreshSession()).user}async login({mode:e,message:t,signature:r,walletClientType:i,connectorType:l,opts:n}){let d=await this._privyInternal.fetch(s,{body:{signature:r,message:t,walletClientType:i,connectorType:l,mode:e}});await this._privyInternal.session.updateWithTokensResponse(d);let o=await a(this._embedded,d,n?.embedded);return this._privyInternal.callbacks?.setUser?.(o.user),o}async fetchNonce({address:e}){let{nonce:t}=await this._privyInternal.fetch(r,{body:{address:e}});return{nonce:t}}constructor(e,t){this._privyInternal=e,this._embedded=t}}export{i as default};
