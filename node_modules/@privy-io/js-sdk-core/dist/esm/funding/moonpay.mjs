import{arbitrum as r}from"../chains/arbitrum.mjs";import{avalanche as e}from"../chains/avalanche.mjs";import{base as n}from"../chains/base.mjs";import{celo as t}from"../chains/celo.mjs";import{mainnet as i}from"../chains/mainnet.mjs";import{optimism as a}from"../chains/optimism.mjs";import{polygon as o}from"../chains/polygon.mjs";const c={prod:{url:"https://api.moonpay.com/v1",key:"pk_live_hirbpu0cVcLHrjktC9l7fbc9ctjv0SL"},sandbox:{url:"https://api.moonpay.com/v1",key:"pk_test_fqWjXZMSFwloh7orvJsRfjiUHXJqFzI"}};let s=new Set([i.id,r.id,n.id,o.id,e.id,t.id]),m=new Set([i.id,r.id,a.id,n.id,o.id]);function d(r,e){switch(e){case"native-currency":return s.has(r);case"USDC":return m.has(r);default:return console.warn("Unknown asset passed to MoonPay Onramp"),!1}}function u(a,c){switch(a){case r.id:return"native-currency"===c?"ETH_ARBITRUM":"USDC_ARBITRUM";case e.id:return"AVAX_CCHAIN";case n.id:return"native-currency"===c?"ETH_BASE":"USDC_BASE";case t.id:return"CELO_CELO";case o.id:return"native-currency"===c?"MATIC_POLYGON":"USDC_POLYGON";case i.id:return"native-currency"===c?"ETH_ETHEREUM":"USDC_ETHEREUM";default:return console.warn(`Chain ${a} not supported by Moonpay, defaulting to Ethereum mainnet`),"ETH_ETHEREUM"}}function p(r){switch(r){case"card":case"payment-request":return"credit_debit_card";default:throw Error(`Unsupported Moonpay funding method ${r}`)}}export{c as MoonpayEnvironments,u as chainToMoonpayCurrency,p as fundingMethodToMoonpayPaymentMethod,d as isSupportedChainIdForMoonpay};
